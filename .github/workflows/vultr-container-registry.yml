name: Vultr Container Registry CI

on:
  push:
    branches:
      - main # or your main branch name

# Prevent multiple deployments running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  push_to_vultr:
    runs-on: ubuntu-latest
    name: Push to Vultr Container Registry
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📅 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- Start: Added for Node.js dependency caching ---
      - name: 📦 Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm # Default npm cache location
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      # --- End: Added for Node.js dependency caching ---

      - name: 🔍 Verify Dockerfile exists
        run: |
          if [ ! -f Dockerfile ]; then
            echo "::error::Dockerfile not found in repository root"
            exit 1
          fi

      - name: 🧪 Run basic checks
        run: |
          if [ -f package.json ]; then
            npm ci # Install dependencies using cache from previous step
            npm run lint || echo "Linting issues found"
            npm test || echo "Tests failed but continuing"
          fi
        continue-on-error: true

      - name: 🏗️ Build React App
        run: |
          npm ci
          NODE_ENV=production npm run build

      - name: 📋 Generate Image Tags
        id: meta
        run: |
          echo "tags=${{ secrets.VULTR_REGISTRY }}/my-react-app:latest,${{ secrets.VULTR_REGISTRY }}/my-react-app:${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: 🔨 Build Docker Image (without pushing)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64/v8
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: 🔒 Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/image.tar
          format: 'table'
          exit-code: '1'  # Fail pipeline if vulnerabilities found
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: 🔓 Login to Vultr Registry
        if: success()  # Only login if vulnerability scan passes
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.VULTR_REGISTRY }}
          username: ${{ secrets.VULTR_USER }}
          password: ${{ secrets.VULTR_API_KEY }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build for scanning (single platform)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64  # Single platform for scanning
          push: false
          outputs: type=docker,dest=/tmp/image.tar