name: Vultr Container Registry CI

on:
  push:
    branches:
      - main # or your main branch name

# Prevent multiple deployments running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  push_to_vultr:
    runs-on: ubuntu-latest
    name: Push to Vultr Container Registry
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üìÖ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- Start: Added for Node.js dependency caching ---
      - name: üì¶ Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm # Default npm cache location
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      # --- End: Added for Node.js dependency caching ---

      - name: üîç Verify Dockerfile exists
        run: |
          if [ ! -f Dockerfile ]; then
            echo "::error::Dockerfile not found in repository root"
            exit 1
          fi

      - name: üß™ Run basic checks
        run: |
          if [ -f package.json ]; then
            npm ci # Install dependencies using cache from previous step
            npm run lint || echo "Linting issues found"
            npm test || echo "Tests failed but continuing"
          fi
        continue-on-error: true

      - name: üîì Login to Vultr Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.VULTR_REGISTRY }}
          username: ${{ secrets.VULTR_USER }}
          password: ${{ secrets.VULTR_API_KEY }}

      - name: üìã Generate Image Tags
        id: meta
        run: |
          echo "tags=${{ secrets.VULTR_REGISTRY }}/my-react-app:latest,${{ secrets.VULTR_REGISTRY }}/my-react-app:${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: üèóÔ∏è Build React App
        run: |
          npm ci
          npm run build

      - name: üî® Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64/v8 # THIS IS THE CRITICAL LINE FOR RASPBERRY PI
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha # Use GitHub Actions cache for Docker layers
          cache-to: type=gha,mode=max # Save Docker layers to GitHub Actions cache

      # Removed the manual cache move step as type=gha handles it automatically